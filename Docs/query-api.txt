Link: https://sec-api.io/docs/query-api

Filing Query API
SEC EDGAR filing index page converted to JSON
SEC EDGAR filing index page converted to JSON and
searchable with the Query API
The Query API allows searching and filtering all 18+ million filings and exhibits published on the SEC EDGAR database since 1993 to present, with new filings being added in 300 milliseconds after their publication on EDGAR. The API accepts simple and complex search expressions and returns the metadata of matching EDGAR filings in JSON format including form type, accession numbers, filing date and times, filer information such as CIK, ticker and entity name, exhibits and attachements, URLs to the original SEC sources, and many more.

EDGAR filings are searchable by numerous parameters, such as: CIK (Central Index Key), ticker symbol or name of the filer, form type, filing date, accession number, item IDs in case of Form 8-K or Form 1-U filings, exhibit types, series and class contract IDs, and more. Refer to the list of searchable parameters to see all available search options.

The filing search capabilities of the Query API can be tested free of charge in our sandbox available here. The sanbdox showcases a variety of filing search examples and allows testing the API with own queries in a simple no-code environment.

Filing Example Response in JSON Format
{
    // Microsoft's 10-Q filing for Q1 2024
    accessionNo: "0000950170-24-048288",
    formType: "10-Q",
    periodOfReport: "2024-03-31",
    filedAt: "2024-04-25T16:06:24-04:00",
    ticker: "MSFT",
    cik: "789019",
    companyName: "MICROSOFT CORP (Filer)",
    linkToFilingDetails: "sec.gov/Archive ... 4048288/msft-20240331.htm",
    entities: [ ... ], // entities associated with filing: CIK, EIN, state of incorp., fiscal year, and more
    documentFormatFiles: [ ... ], // files and exhibits attached to filing: URL, type, size
    dataFiles: [ ... ], // XBRL data files
    // ... more fields
}
The filings database inlcudes all EDGAR form types without exception, from annual and quarterly reports (Form 10-K, 10-Q, 20-F, 40-F), event-driven filings such as Form 8-K and 6-K, insider trading activities (Form 3, 4, 5), over registration statements (Form S-1, S-3, S-8) and prospectuses (Form 424B2, 424B3, 424B4), to institutional investment manager and company filings (Form 13F, N-PORT) and more than 150 other types ever published. The database includes all filings ever published by any of the 800,000 EDGAR filer entities. A full list of all EDGAR form types is available on the form types page.

Dataset size:
All EDGAR filings and exhibits published since 1993 to present, including all form types and all filers.
Data update frequency:
New filings are indexed and searchable in less than 300 milliseconds after they are published on EDGAR.
Survivorship bias free:
Yes. The Query API and filings database include all EDGAR filings and exhibits filed since 1993 to present, from filer entities that are still active and those that are no longer active.
Common Use Cases
The EDGAR filing search capability of the Query API is often used as a first step in a multi-process filing ingestion pipeline. For example, the Query API is often used to find the most recently disclosed filings of a specific form type, such as 10-Qs or 8-Ks, to obtain the URLs of those filings, and then download the full text of the filings using the Filing Download API or to convert the filings to PDFs using the PDF Generator API.

Common use cases for the Query API include:

Submitting recently filed filing exhibits to regulatory authorities
Monitoring filer compliance with exchange rules
Powering internal insight analytics platforms
Backtesting quantitative investment strategies
Showing EDGAR filings on investor relationships websites
API Endpoint
In order to search and retrieve metadata of EDGAR filings, HTTP POST requests with the search expression as payload are sent to the following API endpoint:

https://api.sec-api.io
Supported HTTP methods: POST

Request and response content type: JSON

Authentication
To authenticate your API requests, use the API key shown in your user profile. You can utilize your API key in one of two ways. Choose the method that best fits your implementation:

Authorization Header: Include your API key as an Authorization header in your POST requests. For instance, before sending a POST request to https://api.sec-api.io, ensure the header is set as follows: Authorization: YOUR_API_KEY
Query Parameter: Alternatively, append your API key directly to the URL as a query parameter. For example, when making POST requests, use the URL https://api.sec-api.io?token=YOUR_API_KEY instead of the base API endpoint.
Request Parameters
To search, filter and retrieve metadata of EDGAR filings, send a HTTP POST request with a JSON-formatted payload to the API endpoint https://api.sec-api.io. The payload includes the search criteria, pagination and optional response sorting parameters, for example:

Example of JSON Request Payload to Find the 50 Most Recent 10-Q Filings
{
    "query": "formType:\"10-Q\"",
    "from": "0",
    "size": "50",
    "sort": [{ "filedAt": { "order": "desc" }}]
}
The API request payload includes the following fields, with the query field being required and the others optional:

query (string): Specifies the search criteria written in the Lucene syntax following the field:value format to search filings that include value in the specified field. For example, formType:"10-K" to find Form 10-K filings or ticker:AAPL to locate filings published by Apple. The query string allows searching the filings database by any available field in the response object as described in the Response Format section below. For example, filing lookups can be performed by the filer's CIK, series, class or contract IDs, date ranges across filing publication times and periods of reports, event item codes in Form 8-Ks or 1-Us, exhibit types, and more. Multiple search criteria can be combined using logical operators (AND, OR, NOT). For example, formType:"10-K" AND ticker:AAPL to find Form 10-K filings published by Apple. The maximum length of the query string cannot exceed 3500 characters. Examples of various filing search expressions are available in the Query String Examples section below and in the sandbox. A complete guide on how to use the Lucene syntax is available here.
from (string, optional) - Use the from property to specify the starting position of your search results, facilitating pagination. For instance, set from to 50 to skip the first 50 filings. The default is 0, and the maximum allowed value is 10,000, which is also the cap for the maximum number of filings returned per query string. To retrieve all filings in your search universe, increment from by the value of the size parameter (e.g., 50) until no more filings are returned or the 10,000 filing limit is reached. For example, use 0, 50, 100, and so on. If your query locates more than 10,000 filings, consider narrowing your search by refining your filter criteria, for example, using a date range filter to iterate over months or years. One such approach would be to search for filings with a filedAt date range filter, e.g. filedAt:[2021-01-01 TO 2021-01-31] (all filings from January 2021), then paginate through the results by incrementing from, and once completed, repeat the process for the next month, and so on.
size (string, optional) - Determines the number of filings returned per request. For instance, set size to 10 to retrieve 10 filings per request. The default value is 50, and the maximum allowed value is 50, which is the cap for the maximum number of filings returned per request.
sort (array, optional) - An array of objects that specify how the returned filings are sorted. The default sorting order is descending by filedAt datetime field, most recent filing first. The sorting order can be changed to ascending by setting order to asc. The default sorting order can be overridden by specifying a different sorting field. For example, to sort filings by periodOfReport in ascending order, set sort to [{ "periodOfReport": { "order": "asc" } }].
Default: [{ "filedAt": { "order": "desc" } }]
Query String Examples
The following list demonstrates different query examples that can be used to search EDGAR filings by various criteria.

Description
Example
Search EDGAR filings by filer entity properties
Search by CIK of filer
cik:12345
Search by multiple CIKs
cik:(123, 456, 789)
Search by ticker
ticker:AAPL
Search by tickers
ticker:(AAPL, MSFT, NVDA, TSLA)
Search by filer entity name
companyName:"Nissan Auto Receivables" AND companyName:Trust
Search by filer entity SIC
entities.sic:3714
Search by filer entity state
entities.stateOfIncorporation:DE
Search by filer entity IRS number
entities.irsNo:710388071
Search by file number
entities.fileNo:"001-36743"
Search EDGAR filings by filing properties
Search by form type
formType:"10-K"
Multiple form types
formType:"10-K" OR formType:"10-Q"
Excluding form types from search
formType:"10-K" AND NOT formType:"10-K/A"
Search by accession number of filing
accessionNo:"0001193125-23-265616"
Date range without time
filedAt:[2022-01-01 TO 2022-12-31]
Date range with time
filedAt:[2021-09-15T14:00:00 TO 2021-09-15T19:00:00]
Event item ID in Form 8-Ks
items:"2.02" AND formType:"8-K"
Multiple item IDs in Form 8-Ks
items:("2.02", "5.02") AND formType:"8-K"
By series ID
seriesAndClassesContractsInformation.series:S000011051
By class/contract ID
seriesAndClassesContractsInformation. classesContracts.classContract:C000120702
By ticker of class/contract
seriesAndClassesContractsInformation.classesContracts.ticker:ABRZX
By class/contract ID and form type
formType:"NPORT-P" AND seriesAndClassesContractsInformation. classesContracts.classContract:C000120702
By exhibit type
documentFormatFiles.type:*21* AND formType:"10-K"
By registration form of EFFECT types
formType:EFFECT AND registrationForm:"S-3"
Other examples
Match all filings
id:*
Find 10-Ks of companies by ticker
formType:"10-K" AND ticker:(AAPL, MSFT, NVDA, TSLA)
Find 10-Ks with images
formType:"10-K" AND documentFormatFiles.type:GRAPHIC
Good to Know
Search by CIK: cik:CIK_OF_INTEREST or cik:(CIK_1, CIK_2, ...) to find filings disclosed by a specific filer using its CIK, or filings from by multiple filers using their respective CIKs. When searching filings by the CIK of the filer, remove leading zeros from the CIK. For example, transform 0000320193 to 320193. An example CIK search can be performed in the sandbox here.
Search by ticker: ticker:TICKER_OF_INTEREST or ticker:(TICKER_A, TICKER_B, ...) to retrieve filings by one or more ticker symbols of the filing companies. Ticker symbols in the filing search are case-insensitive, meaning that ticker:AAPL and ticker:aapl will return the same results. When performing historical filing searches going back far in time, it is recommended to use a filer's CIK instead of the ticker symbol. This approach accounts for entities that underwent ticker changes or entities that have multiple security classes listed on exchanges trading under different tickers, such as Alphabet's Class A (ticker: GOOGL) and Class C (ticker: GOOG) shares. The Mapping API can be used to resolve and map ticker symbols to CIKs, and vice versa. An example ticker search can be performed in the sandbox here.
Search by company name: companyName:"NAME OF COMPANY" to perform a search by the company name. Enclose the company name in double quotes (e.g., companyName:"My Trust A") to treat the company name as a single search term. This is useful when searching for company names that include whitespaces or special characters like "-", "." and "&". If the company name is a single word, the double quotes are optional. If the company name includes whitespaces and double quotes are omitted, each word is treated as a separate search term combined with an implicit OR operator. For example, companyName:My Trust A is equivalent to companyName:My OR *:Trust OR *:A, which searches for filings with the words "My" in the companyName field, or "Trust" in any field, or "A" in any field.
Search by EDGAR form type: formType:"FORM TYPE OF INTEREST" or formType:("FORM TYPE A", "FORM TYPE B", ...) to search for filings by one or multiple EDGAR form types. Ensure to enclose form types in double quotes (e.g., formType:"10-K"). The Query API provides access to the entire EDGAR filings corpus, allowing searches across all form types without exception. A complete list of form types can be found here. An example form type search can be performed in the sandbox.
Search across dates: filedAt:[START_DATE TO END_DATE] to search for filings filed within a specific date and time range. Use square brackets [ ] to include the start and end dates in the search. The date format is YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS for specific times. The time component is optional. For example, filedAt:[2021-01-01 TO 2021-12-31] captures all filings from midnight January 1, 2021 to midnight December 31, inclusive. An example with a time component is filedAt:[2021-01-06T14:00:00 TO 2021-01-06T15:00:00], which returns all filings disclosed on January 6, 2021 between 2:00 PM and 3:00 PM (Eastern Time), inclusive. The filedAt value in a filing metadata object is reported in Eastern Time in reference to the timezone of the EDGAR system. For example 2021-01-12T16:00:54-05:00 is 4:00:54 PM Eastern Time on January 12, 2021. When performing date-time queries, there is no need to include the timezone offset ("-05:00" or "-04:00"). The API automatically converts all times to Eastern Time. An example of a date-time query is available in the sandbox here.
Nested Field Search: documentFormatFiles.type:"EX-21" AND formType:"10-K" - Use nested field search and combine conditions to filter filings where a specific document type is included in a particular form. For example, this query finds 10-K filings that include Exhibit 21 ("EX-21"). Nested fields can be found in documentFormatFiles, dataFiles, entities, holdings, and seriesAndClassesContractsInformation. Examples of nested field searches are available in our sandbox here (10-K with Exhibit 21), here (10-K with XBRL data) and here (class contract ID).
Request Examples
The following examples demonstrate a range of Query API requests. These queries are designed to help you retrieve specific EDGAR filings based on criteria such as form types, tickers of the filing companies, date ranges, and exhibit types. More examples can be found in the sandbox.

Find the most recent 10-Q filings
Return the 50 most recently filed 10-Q filings, sorted by their publication time filedAt, starting with the newest filings.

JSON
{
    "query": "formType:\"10-Q\"",
    "from": "0",
    "size": "50",
    "sort": [{ "filedAt": { "order": "desc" }}]
}
Pagination: Retrieve more than 10,000 filings
The from parameter is used to paginate through API results and is capped at 10,000. For instance, if a search query like formType:"8-K" AND ticker:AAPL matches 700 filings, but only 50 filings can be returned per API request, the from parameter can be incremented to retrieve all 700 filings. To retrieve all 700 filings:

Set "from": "0" for the first 50 filings.
Set "from": "50" for the next 50, and so on, incrementing by 50 for each subsequent request until no more filings are returned.
JSON payload example for pagination
{
    "query": "formType:\"8-K\" AND ticker:AAPL",
    "from": "0", // increase by 50 for pagination, e.g. 0, 50, 100, ...
    "size": "50",
    "sort": [{ "filedAt": { "order": "desc" }}]
}
If the total number of filings exceeds 10,000, the from parameter alone will not be sufficient to retrieve all results. For example, a search for all Form 8-K filings between 2010 and 2020 might return 700,000 filings, but paginating only retrieves the first 10,000.

To fetch the entire set of filings, the query should be broken down into multiple queries, each with a different date range filter. For example, start by searching for all 8-Ks between January 1st and 31st, 2010, and then paginate through the results:

JSON payload example for pagination using date ranges
{
    // adjust the year and month once all filings have been retrieved with pagination
    // for example: filedAt:[2010-01-01 TO 2010-01-31], filedAt:[2010-02-01 TO 2010-02-31], ...
    "query": "formType:\"8-K\" AND filedAt:[2010-01-01 TO 2010-01-31]",
    "from": "0", // increase by 50 for pagination, e.g. 0, 50, 100, ...
    "size": "50",
    "sort": [{ "filedAt": { "order": "desc" }}]
}
Once all filings for January 2010 have been retrieved, the date range can be adjusted to February 2010, March 2010, and so on. The process can then continue month by month, year over year, with pagination applied to each date range, until all relevant filings have been retrieved.

Searching across publication times
Return all S-1 filings published in 2021. The set of all results can be paginated by incrementing the from parameter.

JSON
{
    "query": "formType:\"S-1\" AND filedAt:[2021-01-01 TO 2021-12-31]",
    "from": "0", // increase by 50 for pagination, e.g. 0, 50, 100, ...
    "size": "50",
    "sort": [{ "filedAt": { "order": "desc" }}]
}
Find Apple's most recent 10-K filings
Return Apple's 10 most recently filed 10-K filings, sorted by filedAt, start with the newest.

JSON
{
    "query": "ticker:AAPL AND formType:\"10-K\"",
    "from": "0",
    "size": "10",
    "sort": [{ "filedAt": { "order": "desc" }}]
}
Find Form 10-K filings with Exhibit 21
Return the 10 most recently filed 10-Ks that have exhibit 21, sorted by filedAt, start with the newest.

JSON
{
    "query": "formType:\"10-K\" AND documentFormatFiles.type:\"EX-21\"",
    "from": "0",
    "size": "10",
    "sort": [{ "filedAt": { "order": "desc" }}]
}
Form 8-K with Item 2.02 - Results of Operations and Financial Condition
Return the 10 most recently filed Form 8-K filings for material events that include Item 2.02 (Results of Operations and Financial Condition).

JSON
{
    "query": "formType:\"8-K\" AND items:\"2.02\"",
    "from": "0",
    "size": "10",
    "sort": [{ "filedAt": { "order": "desc" }}]
}
Response Format
The Query API returns the metadata of filings matching the provided search expression in JSON format. The response object includes two main fields:

total (object) - An object with two fields, value and relation. value represents the total number of filings matching the query. A value of 10,000 and relation of "gte" (= greater than or equal), indicates that more than 10,000 filings match the search criteria. The filing count (value) is capped at 10,000 per search query. If a search query identifies more than 10,000 filings, the value will be set to 10,000, and does not reflect the exact number of matching filings. Typically, the number of matching filings is greater than the number of filings that can be returned in a single API response. In such cases, the from parameter can be incremented on subsequent API calls to paginate through the results. For example, to retrieve all filings matching the query, increment from by the value of the size parameter (e.g., 50) until no more filings are returned or the 10,000 filing limit is reached.
filings (array of objects) - A list of maximum 50 filings matching the provided search criteria. All fields of an object in the filings array are searchable. Filing format:
id (string) - System-internal unique ID of the filing object. A filing might reference multiple entities, for example, in case of Form 4 filings which reference at least one reporting person and one issuer company. In such cases, multiple filing objects are created, each with a unique ID, but all with the same accessionNo.
accessionNo (string) - Accession number of filing, e.g. 0000028917-20-000033.
formType (string) - EDGAR filing form type, e.g 10-K or 10-K/A. All 150+ form types including SEC correspondences are covered. A complete list of all form types is available here.
filedAt (string) - Represents the Accepted attribute of a filing in ISO 8601 format, and shows the date and time the filing was accepted by the EDGAR system. A filing also contains a Filing Date attribute that only shows the date. The Accepted and Filing Date attribute do not have to represent the the same date. Format: YYYY-MM-DD HH:mm:SS TZ, e.g. 2019-12-06T14:41:26-05:00. The timezone is always in Eastern Time (ET) and the time is in 24-hour format. During daylight savings time (summer), the timezone offset is -04:00, and during standard time (winter), the offset is -05:00.
cik (string) - CIK of the filing issuer with leading 0 removed, e.g. 28917.
ticker (string) - Ticker symbol of the filing company, e.g. AMOT. A ticker is not available when non-publicly traded companies report filings, for example, in case of mutual funds or asset-backed securities.
companyName (string) - Name of primary filing company or person, e.g. Allied Motion Technologies Inc.
companyNameLong (string) - Long version of company name including the filer type (Issuer, Filer, Reporting), e.g. ALLIED MOTION TECHNOLOGIES INC (0000046129) (Issuer)
description (string) - Description of the form, e.g. Statement of changes in beneficial ownership of securities. Includes the item numbers reported in 8-K, 8-K/A, D, D/A, ABS-15G, ABS-15G/A, 1-U and 1-U/A filings, e.g. Form 8-K - Current report - Item 1.03 Item 3.03 Item 5.02 Item 9.01".
linkToFilingDetails (string) - URL of the actual filing content on sec.gov. Use this link in combination with our Filing Download API to download the filing content.
linkToTxt (string) - URL of the plain text .TXT version of the filing. The content of this file includes the entire filing and its exhibits and can exceed several 100MB in size.
linkToHtml (string) - URL of the index page (also known as filing detail page) of the filing, e.g. "sec.gov/Archives/.../0001803599-24-000156-index.htm".
periodOfReport (string, if reported) - Period of report in the format YYYY-MM-DD, e.g. 2021-06-08. The periodOfReport has different meanings depending on the form type. For example, in Form 10-K filings, it represents the fiscal year end date. In Form 4 filings, it represents the transaction date, and in Form 13F filings, it represents the quarter end date.
effectivenessDate (string, if reported) - Effectiveness date in the format YYYY-MM-DD, e.g. 2021-06-08. The effectivenessDate is only reported on certain form types, such as EFFECT, 18-K, TA-1, and more.
effectivenessTime (string, if reported) - Effectiveness time in the format HH:mm:ss, e.g. 16:00:00. The effectivenessTime is only reported for EFFECT forms.
registrationForm (string, if reported) - Registration form type as reported on EFFECT forms, e.g. S-1.
referenceAccessionNo (string, if reported) - Reference accession number as reported on EFFECT forms, e.g. 0001213900-22-001446.
items (array of strings, if reported) - Items represents an array of item strings as reported on form 8-K, 8-K/A, D, D/A, ABS-15G, ABS-15G/A, 1-U, 1-U/A. For example: ["Item 3.02: Unregistered Sales of Equity Securities", "Item 9.01: Financial Statements and Exhibits"]
groupMembers (array, if reported) - Group members represents an array of member strings as reported on SC 13G, SC 13G/A, SC 13D, SC 13D/A filings, e.g. [ "c N. LITOWITZMAGNETAR CAPITAL PARTNERS LPSUPERNOVA MANAGEMENT LLC" ]
entities (array) - A list of all entities referred to in the filing. The first item in the array always represents the filing issuer. Each array element is an object with the following keys:
companyName (string) - Company name of the entity, e.g. DILLARD'S, INC. (Issuer)
cik (string) - CIK of the entity. Leading 0 are not removed here, e.g. 0000028917
irsNo (string, optional) - IRS number of the entity, e.g. 710388071
stateOfIncorporation (string, optional) - State of incorporation of entity, e.g. AR
fiscalYearEnd (string, optional) - Fiscal year end of the entity, e.g. 0201
sic (string, optional) - SIC of the entity, e.g. 5311 Retail-Department Stores
type (string, optional) - Type of the filing being filed. Same as formType, e.g. 4
act (string, optional) - The SEC act pursuant to which the filing was filed, e.g. 34
fileNo (string, optional) - Filer number of the entity, e.g. 001-06140
filmNo (string, optional) - Film number of the entity, e.g. 20575664
documentFormatFiles (array) - An array listing all primary files of the filing, including its exhibits. The first item of the array always represents the filing itself. The last item of the array always represents the text .TXT version of the filing. All other items can represent exhibits, press releases, PDF documents, presentations, graphics, XML files, and more. An array item is represented as follows:
sequence (string, optional) - The sequence number of the file indicating the order of the files in the filing, e.g. 1.
description (string, optional) - Description of the file, e.g. EXHIBIT 31.1.
documentUrl (string) - URL to the file on SEC.gov. The URL includes the file extension, such as .HTML, .PDF, .TXT, .XML, etc.
type (string, optional) - Type of the file, e.g. EX-32.1, GRAPHIC or 10-Q.
size (string, optional) - Size of the file in bytes, e.g. 6627216.
dataFiles (array) - List of data files primarily used for XBRL filings. Each item has the following fields:
sequence (string) - Sequence number of the file indicating its order in the filing, e.g. 1.
description (string) - Description of the file, e.g. XBRL INSTANCE DOCUMENT
documentUrl (string) - URL to the file on SEC.gov. The URL includes the file extension, such as .XSD or .XML.
type (string, optional) - Type of the file, e.g. EX-101.INS, EX-101.DEF or EX-101.PRE
size (string, optional) - Size of the file in bytes, e.g. 6627216
seriesAndClassesContractsInformation (array) - List of series and classes/contracts information.
series (string) - Series ID, e.g. S000001297.
name (string) - Name of entity, e.g. PRUDENTIAL ANNUITIES LIFE ASSUR CORP VAR ACCT B CL 1 SUB ACCTS
classesContracts (array) - List of classes/contracts. Each list item has the following keys:
classContract (string) - Class/Contract ID, e.g. C000011787.
name (string) - Name of class/contract, e.g. Class L.
ticker (string) - Ticker of the class/contract, e.g. URTLX.
Response Example
The following example shows the JSON response with the metadata of three filings matching the search criteria. The response includes the total number of filings matching the query and the metadata of the matching filings.

JSON: Example Response with 3 Filings
{
  "total": {
    "value": 10000,
    "relation": "gte"
  },
  "filings": [
    {
      "id": "9bb018bb35b26df92204a0afba52c30a",
      "accessionNo": "0001437749-20-002201",
      "cik": "924383",
      "ticker": "GNSS",
      "companyName": "Genasys Inc.",
      "companyNameLong": "Genasys Inc. (Filer)",
      "formType": "10-Q",
      "periodOfReport": "2019-12-31",
      "description": "Form 10-Q - Quarterly report [Sections 13 or 15(d)]",
      "filedAt": "2020-02-10T19:28:05-05:00",
      "linkToTxt": "https://www.sec.gov/Archives/edgar/data/924383/0001437749-20-002201.txt",
      "linkToHtml": "https://www.sec.gov/Archives/edgar/data/924383/0001437749-20-002201-index.htm",
      "linkToFilingDetails": "https://www.sec.gov/Archives/edgar/data/924383/000143774920002201/lrad20191231_10q.htm",
      "entities": [
        {
          "companyName": "Genasys Inc. (Filer)",
          "cik": "0000924383",
          "irsNo": "870361799",
          "stateOfIncorporation": "DE",
          "fiscalYearEnd": "0930",
          "type": "10-Q",
          "act": "34",
          "fileNo": "000-24248",
          "filmNo": "20593428",
          "sic": "3651 Household Audio &amp; Video Equipment"
        }
      ],
      "documentFormatFiles": [
        {
          "sequence": "1",
          "description": "FORM 10-Q",
          "documentUrl": "https://www.sec.gov/Archives/edgar/data/924383/000143774920002201/lrad20191231_10q.htm",
          "type": "10-Q",
          "size": "938119"
        },
        {
          "sequence": "2",
          "description": "EXHIBIT 31.1",
          "documentUrl": "https://www.sec.gov/Archives/edgar/data/924383/000143774920002201/ex_171266.htm",
          "type": "EX-31.1",
          "size": "13563"
        },
        {
          "sequence": "3",
          "description": "EXHIBIT 31.2",
          "documentUrl": "https://www.sec.gov/Archives/edgar/data/924383/000143774920002201/ex_171267.htm",
          "type": "EX-31.2",
          "size": "13507"
        },
        {
          "sequence": "4",
          "description": "EXHIBIT 32.1",
          "documentUrl": "https://www.sec.gov/Archives/edgar/data/924383/000143774920002201/ex_171268.htm",
          "type": "EX-32.1",
          "size": "8102"
        },
        {
          "sequence": "11",
          "documentUrl": "https://www.sec.gov/Archives/edgar/data/924383/000143774920002201/logo.jpg",
          "type": "GRAPHIC",
          "size": "5579"
        },
        {
          "sequence": " ",
          "description": "Complete submission text file",
          "documentUrl": "https://www.sec.gov/Archives/edgar/data/924383/000143774920002201/0001437749-20-002201.txt",
          "type": " ",
          "size": "6627216"
        }
      ],
      "dataFiles": [
        {
          "sequence": "5",
          "description": "XBRL INSTANCE DOCUMENT",
          "documentUrl": "/Archives/edgar/data/924383/000143774920002201/lrad-20191231.xml",
          "type": "EX-101.INS",
          "size": "1561458"
        },
        {
          "sequence": "6",
          "description": "XBRL TAXONOMY EXTENSION SCHEMA",
          "documentUrl": "/Archives/edgar/data/924383/000143774920002201/lrad-20191231.xsd",
          "type": "EX-101.SCH",
          "size": "70974"
        },
        {
          "sequence": "7",
          "description": "XBRL TAXONOMY EXTENSION CALCULATION LINKBASE",
          "documentUrl": "/Archives/edgar/data/924383/000143774920002201/lrad-20191231_cal.xml",
          "type": "EX-101.CAL",
          "size": "49944"
        },
        {
          "sequence": "8",
          "description": "XBRL TAXONOMY EXTENSION DEFINITION LINKBASE",
          "documentUrl": "/Archives/edgar/data/924383/000143774920002201/lrad-20191231_def.xml",
          "type": "EX-101.DEF",
          "size": "464656"
        },
        {
          "sequence": "9",
          "description": "XBRL TAXONOMY EXTENSION LABEL LINKBASE",
          "documentUrl": "/Archives/edgar/data/924383/000143774920002201/lrad-20191231_lab.xml",
          "type": "EX-101.LAB",
          "size": "399474"
        },
        {
          "sequence": "10",
          "description": "XBRL TAXONOMY EXTENSION PRESENTATION LINKBASE",
          "documentUrl": "/Archives/edgar/data/924383/000143774920002201/lrad-20191231_pre.xml",
          "type": "EX-101.PRE",
          "size": "505337"
        }
      ]
    },
    {
      "id": "df49e5e7adce70be6673b54d616f51a2",
      "accessionNo": "0001104659-20-015211",
      "cik": "1529463",
      "ticker": "FTSI",
      "companyName": "FTS International, Inc.",
      "companyNameLong": "FTS International, Inc. (Issuer)",
      "formType": "4",
      "periodOfReport": "2020-02-06",
      "description": "Form 4 - Statement of changes in beneficial ownership of securities",
      "filedAt": "2020-02-10T21:49:01-05:00",
      "linkToTxt": "https://www.sec.gov/Archives/edgar/data/1529463/0001104659-20-015211.txt",
      "linkToHtml": "https://www.sec.gov/Archives/edgar/data/1529463/0001104659-20-015211-index.htm",
      "linkToFilingDetails": "https://www.sec.gov/Archives/edgar/data/1529463/000110465920015211/xslF345X03/a4.xml",
      "entities": [
        {
          "companyName": "FTS International, Inc. (Issuer)",
          "cik": "0001529463",
          "irsNo": "451610731",
          "stateOfIncorporation": "DE",
          "fiscalYearEnd": "1231",
          "sic": "1389 Oil &amp; Gas Field Services, NEC"
        },
        {
          "companyName": "Petersen Buddy (Reporting)",
          "cik": "0001700869",
          "type": "4",
          "act": "34",
          "fileNo": "001-38382",
          "filmNo": "20593681"
        }
      ],
      "documentFormatFiles": [
        {
          "sequence": "1",
          "description": "4",
          "documentUrl": "https://www.sec.gov/Archives/edgar/data/1529463/000110465920015211/xslF345X03/a4.xml",
          "type": "4",
          "size": " "
        },
        {
          "sequence": "1",
          "description": "4",
          "documentUrl": "https://www.sec.gov/Archives/edgar/data/1529463/000110465920015211/a4.xml",
          "type": "4",
          "size": "3459"
        },
        {
          "sequence": " ",
          "description": "Complete submission text file",
          "documentUrl": "https://www.sec.gov/Archives/edgar/data/1529463/000110465920015211/0001104659-20-015211.txt",
          "type": " ",
          "size": "5101"
        }
      ],
      "dataFiles": []
    },
    {
      "id": "b5f3f0e95d890fd3107b83ec2d6bc115",
      "accessionNo": "0001193125-20-030183",
      "cik": "814453",
      "ticker": "NWL",
      "companyName": "NEWELL BRANDS INC.",
      "companyNameLong": "NEWELL BRANDS INC. (Filer)",
      "formType": "8-K/A",
      "periodOfReport": "2020-02-04",
      "description": "Form 8-K/A - Current report: [Amend] - Item 5.02",
      "items": [
        "Item 5.02: Departure of Directors or Certain Officers; Election of Directors; Appointment of Certain Officers: Compensatory Arrangements of Certain Officers"
      ],
      "filedAt": "2020-02-10T21:59:39-05:00",
      "linkToTxt": "https://www.sec.gov/Archives/edgar/data/814453/0001193125-20-030183.txt",
      "linkToHtml": "https://www.sec.gov/Archives/edgar/data/814453/0001193125-20-030183-index.htm",
      "linkToFilingDetails": "https://www.sec.gov/ix?doc=/Archives/edgar/data/814453/000119312520030183/d884349d8ka.htm",
      "entities": [
        {
          "companyName": "NEWELL BRANDS INC. (Filer)",
          "cik": "0000814453",
          "irsNo": "363514169",
          "stateOfIncorporation": "DE",
          "fiscalYearEnd": "1231",
          "type": "8-K/A",
          "act": "34",
          "fileNo": "001-09608",
          "filmNo": "20593687",
          "sic": "3089 Plastics Products, NEC"
        }
      ],
      "documentFormatFiles": [
        {
          "sequence": "1",
          "description": "FORM 8-K/A",
          "documentUrl": "https://www.sec.gov/ix?doc=/Archives/edgar/data/814453/000119312520030183/d884349d8ka.htm",
          "type": "8-K/A",
          "size": "29035"
        },
        {
          "sequence": " ",
          "description": "Complete submission text file",
          "documentUrl": "https://www.sec.gov/Archives/edgar/data/814453/000119312520030183/0001193125-20-030183.txt",
          "type": " ",
          "size": "152541"
        }
      ],
      "dataFiles": [
        {
          "sequence": "2",
          "description": "XBRL TAXONOMY EXTENSION SCHEMA",
          "documentUrl": "/Archives/edgar/data/814453/000119312520030183/nwl-20200204.xsd",
          "type": "EX-101.SCH",
          "size": "3065"
        },
        {
          "sequence": "3",
          "description": "XBRL TAXONOMY EXTENSION LABEL LINKBASE",
          "documentUrl": "/Archives/edgar/data/814453/000119312520030183/nwl-20200204_lab.xml",
          "type": "EX-101.LAB",
          "size": "18079"
        },
        {
          "sequence": "4",
          "description": "XBRL TAXONOMY EXTENSION PRESENTATION LINKBASE",
          "documentUrl": "/Archives/edgar/data/814453/000119312520030183/nwl-20200204_pre.xml",
          "type": "EX-101.PRE",
          "size": "11383"
        },
        {
          "sequence": "9",
          "description": "EXTRACTED XBRL INSTANCE DOCUMENT",
          "documentUrl": "/Archives/edgar/data/814453/000119312520030183/d884349d8ka_htm.xml",
          "type": "XML",
          "size": "3470"
        }
      ]
    }
  ]
}

Search SEC Filings With Python
This page provides ready-to-execute examples demonstrating how to search and retrieve metadata of EDGAR filings from 1993 to present with Python. Various use cases are covered, such as how to find SEC filings by ticker, form type, and publication date, how to download historical 10-Q filings over an extended period, or how to find Form 8-K filings by specific event items.

On this page:
Quick Start
Search SEC Filings by Ticker, Form Type and Publication Date
Find URLs of SEC Filings Over an Extended Period
Export SEC Filings Metadata to a CSV File
Find XSD URLs of Annual Reports on Form 10-K
Get a List of Fiscal Period End Dates of Companies
Find EDGAR Filings by Item
Find 8-K Filings by Triggering Event Item
Find Form D Filings by Item
Quick Start
Open In Colab   Download Notebook

The example below demonstrates how to use the sec-api Python package to interact with the Query API. It shows how to retrieve metadata for the latest 50 EDGAR filings for Tesla using the get_filings(search_parameters) function from the QueryApi class. The search parameters are passed to the get_filings function and include:

query: The Lucene search query, such as ticker:TSLA.
from: The starting index for pagination of search results.
size: The number of results to return per request (maximum of 50).
sort: The field to sort the results by, defaulting to filedAt in descending order.
Refer to the documentation for more details on the API request format.

pip install sec-api
from sec_api import QueryApi

queryApi = QueryApi(api_key="YOUR_API_KEY")

search_params = {
    "query": "ticker:TSLA",
    "from": "0",
    "size": "50",
    "sort": [{"filedAt": {"order": "desc"}}],
}

response = queryApi.get_filings(search_params)
print("Response object fields:\n", list(response.keys()))
Response object fields:
 ['total', 'query', 'filings']
print("Number of filings matching the search criteria:\n", response['total']['value'])
Number of filings matching the search criteria:
 1565
print("Number of filings returned in this response:\n", len(response["filings"]))
Number of filings returned in this response:
 50
import pandas as pd

metadata = pd.DataFrame.from_records(response["filings"])

print("Filing metadata objects converted to a DataFrame:")
metadata.head(3)
Filing metadata objects converted to a DataFrame:
ticker	formType	accessionNo	cik	companyNameLong	companyName	linkToFilingDetails	description	linkToTxt	filedAt	documentFormatFiles	periodOfReport	entities	id	seriesAndClassesContractsInformation	items	linkToHtml	linkToXbrl	dataFiles	effectivenessDate
0	TSLA	8-K	0001628280-24-041816	1318605	Tesla, Inc. (Filer)	Tesla, Inc.	https://www.sec.gov/Archives/edgar/data/131860...	Form 8-K - Current report - Item 2.02 Item 9.01	https://www.sec.gov/Archives/edgar/data/131860...	2024-10-02T09:06:34-04:00	[{'sequence': '1', 'size': '34449', 'documentU...	2024-10-02	[{'fiscalYearEnd': '1231', 'stateOfIncorporati...	347fb19c073dc3f3e8be14aeec9d026c	[]	[Item 2.02: Results of Operations and Financia...	https://www.sec.gov/Archives/edgar/data/131860...		[{'sequence': '3', 'size': '2509', 'documentUr...	NaN
1	TSLA	4	0001771340-24-000004	1318605	Tesla, Inc. (Issuer)	Tesla, Inc.	https://www.sec.gov/Archives/edgar/data/131860...	Form 4 - Statement of changes in beneficial ow...	https://www.sec.gov/Archives/edgar/data/131860...	2024-09-25T19:48:42-04:00	[{'sequence': '1', 'size': ' ', 'documentUrl':...	2024-09-23	[{'fiscalYearEnd': '1231', 'stateOfIncorporati...	e61d1cf43894398a94c4094bcaf71052	[]	NaN	https://www.sec.gov/Archives/edgar/data/131860...		[]	NaN
2	TSLA	144	0001950047-24-007342	1318605	Tesla, Inc. (Subject)	Tesla, Inc.	https://www.sec.gov/Archives/edgar/data/131860...	Form 144 - Report of proposed sale of securities	https://www.sec.gov/Archives/edgar/data/131860...	2024-09-23T16:27:57-04:00	[{'sequence': '1', 'size': ' ', 'documentUrl':...	NaN	[{'fiscalYearEnd': '1231', 'stateOfIncorporati...	4e9e5cbfa0992bf5306f62d530b35d82	[]	NaN	https://www.sec.gov/Archives/edgar/data/131860...		[]	NaN
available_fields = metadata.columns

print("Available filing metadata fields for this response:")
list(available_fields)
Available filing metadata fields for this response:
['ticker',
 'formType',
 'accessionNo',
 'cik',
 'companyNameLong',
 'companyName',
 'linkToFilingDetails',
 'description',
 'linkToTxt',
 'filedAt',
 'documentFormatFiles',
 'periodOfReport',
 'entities',
 'id',
 'seriesAndClassesContractsInformation',
 'items',
 'linkToHtml',
 'linkToXbrl',
 'dataFiles',
 'effectivenessDate']
Search SEC Filings by Ticker, Form Type and Publication Date
Open In Colab   Download Notebook

This examples shows a how to find filter the EDGAR filings database by ticker symbol, form type and publication date. For this example, we will search for all 10-K filings for Apple Inc. (ticker: AAPL) between 2019-01-01 and 2023-12-31. The corresponding search query is:

ticker:AAPL AND formType:"10-K" AND filedAt:[2019-01-01 TO 2023-12-31]
Remember to enclose the formType value in double quotes ("10-K") to ensure that the search matches 10-K filings, and not "10" or "K" filings.

from sec_api import QueryApi

queryApi = QueryApi(api_key="YOUR_API_KEY")

search_query = 'ticker:AAPL AND formType:"10-K" AND filedAt:[2019-01-01 TO 2023-12-31]'

parameters = {
    "query": search_query,
    "from": "0",
    "size": "50",
    "sort": [{"filedAt": {"order": "desc"}}],
}

response = queryApi.get_filings(parameters)
print(f"Number of 10-K filings from Apple between 2019 and 2023:\n {response['total']['value']}")
Number of 10-K filings from Apple between 2019 and 2023:
 5
import json

print("Apple's 10-K filing metdata:")
print(json.dumps(response["filings"][0], indent=2))
Apple 10-K filing metdata:
{
  "ticker": "AAPL",
  "formType": "10-K",
  "accessionNo": "0000320193-23-000106",
  "cik": "320193",
  "companyNameLong": "Apple Inc. (Filer)",
  "companyName": "Apple Inc.",
  "linkToFilingDetails": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/aapl-20230930.htm",
  "description": "Form 10-K - Annual report [Section 13 and 15(d), not S-K Item 405]",
  "linkToTxt": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/0000320193-23-000106.txt",
  "filedAt": "2023-11-02T18:08:27-04:00",
  "documentFormatFiles": [
    {
      "sequence": "1",
      "size": "1558924",
      "documentUrl": "https://www.sec.gov/ix?doc=/Archives/edgar/data/320193/000032019323000106/aapl-20230930.htm",
      "description": "10-K",
      "type": "10-K"
    },
    {
      "sequence": "2",
      "size": "121966",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/a10-kexhibit4109302023.htm",
      "description": "EX-4.1",
      "type": "EX-4.1"
    },
    {
      "sequence": "3",
      "size": "11229",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/a10-kexhibit21109302023.htm",
      "description": "EX-21.1",
      "type": "EX-21.1"
    },
    {
      "sequence": "4",
      "size": "5451",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/a10-kexhibit23109302023.htm",
      "description": "EX-23.1",
      "type": "EX-23.1"
    },
    {
      "sequence": "5",
      "size": "10507",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/a10-kexhibit31109302023.htm",
      "description": "EX-31.1",
      "type": "EX-31.1"
    },
    {
      "sequence": "6",
      "size": "10543",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/a10-kexhibit31209302023.htm",
      "description": "EX-31.2",
      "type": "EX-31.2"
    },
    {
      "sequence": "7",
      "size": "8356",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/a10-kexhibit32109302023.htm",
      "description": "EX-32.1",
      "type": "EX-32.1"
    },
    {
      "sequence": "13",
      "size": "10963",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/aapl-20230930_g1.jpg",
      "type": "GRAPHIC"
    },
    {
      "sequence": "14",
      "size": "146631",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/aapl-20230930_g2.jpg",
      "type": "GRAPHIC"
    },
    {
      "sequence": "\u00a0",
      "size": "9569569",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/0000320193-23-000106.txt",
      "description": "Complete submission text file",
      "type": "\u00a0"
    }
  ],
  "periodOfReport": "2023-09-30",
  "entities": [
    {
      "fiscalYearEnd": "0930",
      "stateOfIncorporation": "CA",
      "act": "34",
      "cik": "320193",
      "fileNo": "001-36743",
      "irsNo": "942404110",
      "companyName": "Apple Inc. (Filer)",
      "type": "10-K",
      "sic": "3571 Electronic Computers",
      "filmNo": "231373899"
    }
  ],
  "id": "0de409aa5047085970060a9efa218f8b",
  "seriesAndClassesContractsInformation": [],
  "linkToHtml": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/0000320193-23-000106-index.htm",
  "linkToXbrl": "",
  "dataFiles": [
    {
      "sequence": "8",
      "size": "59730",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/aapl-20230930.xsd",
      "description": "XBRL TAXONOMY EXTENSION SCHEMA DOCUMENT",
      "type": "EX-101.SCH"
    },
    {
      "sequence": "9",
      "size": "155393",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/aapl-20230930_cal.xml",
      "description": "XBRL TAXONOMY EXTENSION CALCULATION LINKBASE DOCUMENT",
      "type": "EX-101.CAL"
    },
    {
      "sequence": "10",
      "size": "233471",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/aapl-20230930_def.xml",
      "description": "XBRL TAXONOMY EXTENSION DEFINITION LINKBASE DOCUMENT",
      "type": "EX-101.DEF"
    },
    {
      "sequence": "11",
      "size": "854271",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/aapl-20230930_lab.xml",
      "description": "XBRL TAXONOMY EXTENSION LABEL LINKBASE DOCUMENT",
      "type": "EX-101.LAB"
    },
    {
      "sequence": "12",
      "size": "516226",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/aapl-20230930_pre.xml",
      "description": "XBRL TAXONOMY EXTENSION PRESENTATION LINKBASE DOCUMENT",
      "type": "EX-101.PRE"
    },
    {
      "sequence": "90",
      "size": "1432664",
      "documentUrl": "https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/aapl-20230930_htm.xml",
      "description": "EXTRACTED XBRL INSTANCE DOCUMENT",
      "type": "XML"
    }
  ]
}
Find URLs of SEC Filings Over an Extended Period
Open In Colab   Download Notebook

A common use case for the Query API is retrieving filing URLs and accession numbers from a large range of filings over an extended disclosure period, and saving the metadata locally for further processing.

Use cases for such data include:

Downloading filings via the Filing Download API
Generating PDF versions of filings and exhibits using the PDF Generator API
Extracting content sections with the Extractor API
Accessing structured XBRL data in JSON format from filings with the XBRL-JSON API
And more
One such example is to locate all Form 10-Q filings submitted to the SEC between 2014 and 2023, and save the URLs pointing to the HTML version of each filing to a local file. The initial search query is:

formType:"10-Q" AND filedAt:[2014-01-01 TO 2023-12-31]
By default, the Query API can return a maximum of 10,000 filings per search query. Since the API returns 50 filings per request, pagination is necessary to retrieve more than 50 results. The from parameter is used to paginate through the results, specifying the starting position for each batch, and is incremented by 50 with each subsequent API call.

However, because there are typically three 10-Q filings per company each quarter, and more than 5,000 active companies per year, this query will return far more than 10,000 filings, meaning pagination alone is insufficient. To retrieve all filings, the query needs to be broken down into smaller chunks, such as by year and month, with pagination applied to each chunk. Since no single month contains more than 10,000 Form 10-Q filings, pagination within each month ensures complete retrieval.

For example, the search queries for 10-Q filings filed in January and February of 2014 would look like this:

# Search for 10-Q filings filed in January 2014
formType:"10-Q" AND filedAt:[2014-01-01 TO 2014-01-31]

# Search for 10-Q filings filed in February 2014
formType:"10-Q" AND filedAt:[2014-02-01 TO 2014-02-28]
The following approach iterates over the years from 2014 to 2023, and for each year, loops through the months from January to December. For each month, multiple Query API requests are executed by incrementing the from parameter in steps of 50 to capture all 10-Q filings for that month. The URLs of the filings are then saved to a file on the local disk.

The same approach can be applied to other filing types and filtering criteria, such as Form 10-K filings, Form 8-K filings, filings by specific companies, and more.

pip install sec-api
from sec_api import QueryApi

queryApi = QueryApi(api_key="YOUR_API_KEY")
search_parameters = {
  "query": "<PLACEHOLDER>", # will be set during runtime
  "from": "0", # will be incremented by 50 during runtime
  "size": "50",
  "sort": [{ "filedAt": { "order": "desc" } }]
}
# open the file to store the filing URLs
log_file = open("filing_urls.csv", "a")

# fetch filings filed in 2023, then 2022, 2021, ... up to 2014
# uncomment line below to fetch all filings filed between 2014 and 2023
# for year in range(2023, 2013, -1):
for year in range(2023, 2022, -1):
    print(f"Starting search for: {year}")

    # iterate over all months in a year and
    # build a query to fetch all 10-Q filings
    # filed in that month and year
    for month in range(1, 13, 1):
        search_parameters["from"] = 0

        form_type_query = 'formType:"10-Q"'
        date_range_query = f"filedAt:[{year}-{month:02d}-01 TO {year}-{month:02d}-31]"
        search_parameters["query"] = form_type_query + " AND " + date_range_query

        print("Starting filing search for: ", search_parameters["query"])

        # paginate through results by increasing "from" parameter
        # until all results are fecthed and no more filings are returned
        # uncomment line below to fetch all 10,000 filings per month
        # for from_param in range(0, 9950, 50):
        for from_param in range(0, 50, 50):
            search_parameters["from"] = from_param

            response = queryApi.get_filings(search_parameters)

            # stop if no more filings are returned
            if len(response["filings"]) == 0:
                break

            # for each filing, get the URL of the filing
            # set in the dict key "linkToFilingDetails"
            urls_list = list(
                map(lambda x: x["linkToFilingDetails"], response["filings"])
            )

            # transform the list of URLs into a single string by
            # joining all list elements, add a new-line character between each element
            urls_string = "\n".join(urls_list) + "\n"

            log_file.write(urls_string)

log_file.close()
Starting search for: 2023
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-01-01 TO 2023-01-31]
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-02-01 TO 2023-02-31]
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-03-01 TO 2023-03-31]
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-04-01 TO 2023-04-31]
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-05-01 TO 2023-05-31]
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-06-01 TO 2023-06-31]
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-07-01 TO 2023-07-31]
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-08-01 TO 2023-08-31]
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-09-01 TO 2023-09-31]
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-10-01 TO 2023-10-31]
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-11-01 TO 2023-11-31]
Starting filing search for:  formType:"10-Q" AND filedAt:[2023-12-01 TO 2023-12-31]
# let's inspect the content of file
log_file = open("filing_urls.csv", "r")
urls = log_file.readlines()
# replace \n at the end of each line with empty string
urls = list(map(lambda x: x.replace("\n", ""), urls))
print("Number of URLs fetched:\n", len(urls))
print("Snippet of 10-Q filing URLs fetched: ")
urls[:10]
Number of URLs fetched:
 600
Snippet of 10-Q filing URLs fetched: 
['https://www.sec.gov/Archives/edgar/data/1596993/000159699323000011/lpg-20221231x10q.htm',
 'https://www.sec.gov/Archives/edgar/data/1666138/000166613823000032/atkr-20221230.htm',
 'https://www.sec.gov/Archives/edgar/data/96021/000009602123000033/syy-20221231.htm',
 'https://www.sec.gov/Archives/edgar/data/50725/000005072523000006/gff-20221231.htm',
 'https://www.sec.gov/Archives/edgar/data/17313/000001731323000006/cswc-20221231.htm',
 'https://www.sec.gov/Archives/edgar/data/1169561/000116956123000013/cvlt-20221231.htm',
 'https://www.sec.gov/Archives/edgar/data/1680873/000168087323000008/hffg-20220930.htm',
 'https://www.sec.gov/Archives/edgar/data/1680873/000168087323000007/hffg-20220630.htm',
 'https://www.sec.gov/Archives/edgar/data/1680873/000168087323000006/hffg-20220331.htm',
 'https://www.sec.gov/Archives/edgar/data/1681622/000168162223000013/var-20221230.htm']
How to Export SEC Filing Metadata to a CSV File
Open In Colab   Download Notebook

SEC EDGAR filing metadata, including the filer's CIK, ticker, URL to the filing content, filing date, form type, and other parameters, can be exported to a CSV file for analysis in different tools. This example demonstrates how to export SEC filing metadata to a CSV file using the sec-api library.

The Query API is used to retrieve SEC filings that match a specified search criteria, such as all filings from Microsoft in January 2024.

ticker:MSFT AND filedAt:[2024-01-01 TO 2024-01-31]
A field_names list is defined, with each entry representing a filing field and column to be saved to the CSV file. Pandas is used to create a DataFrame from the search results and export the data to a CSV file filings.csv.

pip install sec-api
from sec_api import QueryApi
import pandas as pd

queryApi = QueryApi(api_key="YOUR_API_KEY")
search_parameters = {
    "query": "ticker:MSFT AND filedAt:[2024-01-01 TO 2024-03-31]",
    "from": "0",
    "size": "50",
    "sort": [{"filedAt": {"order": "desc"}}],
}

response = queryApi.get_filings(search_parameters)
filings = pd.DataFrame(response["filings"])
print("Number of filings: ", len(filings))
filings.head(3)
Number of filings:  42
ticker	formType	accessionNo	cik	companyNameLong	companyName	linkToFilingDetails	description	linkToTxt	filedAt	documentFormatFiles	periodOfReport	entities	id	seriesAndClassesContractsInformation	linkToHtml	linkToXbrl	dataFiles	items
0	MSFT	11-K	0000950170-24-034807	789019	MICROSOFT CORP (Filer)	MICROSOFT CORP	https://www.sec.gov/Archives/edgar/data/789019...	Form 11-K - Annual report of employee stock pu...	https://www.sec.gov/Archives/edgar/data/789019...	2024-03-21T16:43:04-04:00	[{'sequence': '1', 'size': '169301', 'document...	2023-12-31	[{'fiscalYearEnd': '0630', 'stateOfIncorporati...	6bfec9c9284b22aaa31b585dfc2367e1	[]	https://www.sec.gov/Archives/edgar/data/789019...		[]	NaN
1	MSFT	4	0001062993-24-006558	789019	MICROSOFT CORP (Issuer)	MICROSOFT CORP	https://www.sec.gov/Archives/edgar/data/789019...	Form 4 - Statement of changes in beneficial ow...	https://www.sec.gov/Archives/edgar/data/789019...	2024-03-15T18:14:39-04:00	[{'sequence': '1', 'size': ' ', 'documentUrl':...	2024-03-14	[{'fiscalYearEnd': '0630', 'stateOfIncorporati...	97a378d6579c752fb2b8dc472895dbaf	[]	https://www.sec.gov/Archives/edgar/data/789019...		[]	NaN
2	MSFT	4	0001062993-24-006557	789019	MICROSOFT CORP (Issuer)	MICROSOFT CORP	https://www.sec.gov/Archives/edgar/data/789019...	Form 4 - Statement of changes in beneficial ow...	https://www.sec.gov/Archives/edgar/data/789019...	2024-03-15T18:14:13-04:00	[{'sequence': '1', 'size': ' ', 'documentUrl':...	2024-03-14	[{'fiscalYearEnd': '0630', 'stateOfIncorporati...	f214c7b6a44d43eda13f77d3c06e5570	[]	https://www.sec.gov/Archives/edgar/data/789019...		[]	NaN
# every entry in field_names represents a filing parameter
# and the column name in the CSV file
field_names = ["id", "accessionNo", "formType",
               "filedAt", "items",  "periodOfReport",
               "companyName", "cik", "ticker",
               "linkToFilingDetails", "linkToTxt",
               "documentFormatFiles", "dataFiles", "entities"]

# write the data to a CSV file
filings[field_names].to_csv('filings.csv', index=False)
# read data from the CSV file
filings_from_csv = pd.read_csv('filings.csv')

print("Filing metadata of 10 most recent filings by Tesla saved to filings.csv:\n")
filings_from_csv.head(3)
Filing metadata of 10 most recent filings by Tesla saved to filings.csv:

id	accessionNo	formType	filedAt	items	periodOfReport	companyName	cik	ticker	linkToFilingDetails	linkToTxt	documentFormatFiles	dataFiles	entities
0	6bfec9c9284b22aaa31b585dfc2367e1	0000950170-24-034807	11-K	2024-03-21T16:43:04-04:00	NaN	2023-12-31	MICROSOFT CORP	789019	MSFT	https://www.sec.gov/Archives/edgar/data/789019...	https://www.sec.gov/Archives/edgar/data/789019...	[{'sequence': '1', 'size': '169301', 'document...	[]	[{'fiscalYearEnd': '0630', 'stateOfIncorporati...
1	97a378d6579c752fb2b8dc472895dbaf	0001062993-24-006558	4	2024-03-15T18:14:39-04:00	NaN	2024-03-14	MICROSOFT CORP	789019	MSFT	https://www.sec.gov/Archives/edgar/data/789019...	https://www.sec.gov/Archives/edgar/data/789019...	[{'sequence': '1', 'size': '\xa0', 'documentUr...	[]	[{'fiscalYearEnd': '0630', 'stateOfIncorporati...
2	f214c7b6a44d43eda13f77d3c06e5570	0001062993-24-006557	4	2024-03-15T18:14:13-04:00	NaN	2024-03-14	MICROSOFT CORP	789019	MSFT	https://www.sec.gov/Archives/edgar/data/789019...	https://www.sec.gov/Archives/edgar/data/789019...	[{'sequence': '1', 'size': '\xa0', 'documentUr...	[]	[{'fiscalYearEnd': '0630', 'stateOfIncorporati...
How to Find XSD URLs of Annual Reports on Form 10-K
Open In Colab   Download Notebook

This example demonstrates how to locate and download URLs for XSD files containing the XBRL taxonomy extension schema from 10-K filings submitted between 2020 and 2023. The located URLs are saved in a local file, xsd_urls.csv, and can be used to download the XSD files via the Download API.

The link to the content of an XSD file can be found in the documentUrl field within the first item of the dataFiles array of a filing metadata object, as returned by the Query API.

The Python code example below shows how to use the Query API to search for 10-K filings within the specified date range and extract the URLs of the XSD files. Search queries are constructed for each month from 2020 to 2023, and all filings for that month are retrieved through pagination by incrementing the from parameter until all filings are collected. The XSD URLs are then extracted from the dataFiles array in the metadata and stored in a local CSV file.

The QUICK_RUN variable allows for a test run by skipping 90% of the URLs within the time range. Set it to False to retrieve all URLs.

pip install sec-api
from sec_api import QueryApi

queryApi = QueryApi(api_key="YOUR_API_KEY")
# file to write XSD URLs to
XSD_FILE_NAME = "xsd_urls.csv"
# filing type to extract XSD URLs from
FILING_TYPE = "10-K"
# search range
YEAR_START = 2022
YEAR_END = 2023
# set True if you want to test the program and skip 90% of filings (quick run)
# set False if you want to download all URLs (takes up to 10 minutes)
QUICK_RUN = True
search_params = {
  "query": "PLACEHOLDER", # this will be set during runtime
  "from": "0",
  "size": "50",
  "sort": [{ "filedAt": { "order": "desc" } }]
}
# open the file we use to store the XSD URLs
log_file = open(XSD_FILE_NAME, "a")


# helper function to extract the XSD URL of the first item
# in the dataFiles list of a filing
def get_xsd_url(filing):
    if len(filing["dataFiles"]) > 0:
        return filing["dataFiles"][0]["documentUrl"]
    return None


for year in range(YEAR_START, YEAR_END + 1, 1):
    print(f"Starting {year}")

    # a single search universe is represented as a month of the given year
    for month in range(1, 13, 1):
        search_params["from"] = 0

        form_type_query = f'formType:"{FILING_TYPE}"'
        date_range_query = f"filedAt:[{year}-{month:02d}-01 TO {year}-{month:02d}-31]"
        # example query: "formType:"10-K" AND filedAt:[2021-01-01 TO 2021-01-31]"
        search_params["query"] = f"{form_type_query} AND {date_range_query}"

        print("Starting filing search for: ", search_params["query"])

        # paginate through results by increasing "from" parameter
        # until all filings are fetched
        end = 50 if QUICK_RUN else 10000
        for from_batch in range(0, end, 50):
            search_params["from"] = from_batch

            response = queryApi.get_filings(search_params)

            if len(response["filings"]) == 0:
                break

            # for each filing, get the URL of the XSD file
            urls_list = list(map(get_xsd_url, response["filings"]))

            # remove empty URLS
            urls_list = list(filter(None, urls_list))

            # transform list of URLs into one string by joining all list elements
            # and add a new-line character between each element.
            urls_string = "\n".join(urls_list) + "\n"

            log_file.write(urls_string)

            break


log_file.close()

print("All done!")
Starting 2022
Starting filing search for:  formType:"10-K" AND filedAt:[2022-01-01 TO 2022-01-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2022-02-01 TO 2022-02-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2022-03-01 TO 2022-03-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2022-04-01 TO 2022-04-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2022-05-01 TO 2022-05-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2022-06-01 TO 2022-06-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2022-07-01 TO 2022-07-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2022-08-01 TO 2022-08-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2022-09-01 TO 2022-09-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2022-10-01 TO 2022-10-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2022-11-01 TO 2022-11-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2022-12-01 TO 2022-12-31]
Starting 2023
Starting filing search for:  formType:"10-K" AND filedAt:[2023-01-01 TO 2023-01-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2023-02-01 TO 2023-02-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2023-03-01 TO 2023-03-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2023-04-01 TO 2023-04-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2023-05-01 TO 2023-05-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2023-06-01 TO 2023-06-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2023-07-01 TO 2023-07-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2023-08-01 TO 2023-08-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2023-09-01 TO 2023-09-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2023-10-01 TO 2023-10-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2023-11-01 TO 2023-11-31]
Starting filing search for:  formType:"10-K" AND filedAt:[2023-12-01 TO 2023-12-31]
All done!
import pandas as pd

xsd_urls = pd.read_csv(XSD_FILE_NAME, header=None, names=["URL"])

print("Number of XSD File URLs:\n", xsd_urls.shape[0])
print("First 5 XSD File URLs:")
xsd_urls.head()
Number of XSD File URLs:
 120
First 5 XSD File URLs:
URL
0	https://www.sec.gov/Archives/edgar/data/12239/...
1	https://www.sec.gov/Archives/edgar/data/831489...
2	https://www.sec.gov/Archives/edgar/data/106508...
3	https://www.sec.gov/Archives/edgar/data/109006...
4	https://www.sec.gov/Archives/edgar/data/12927/...
How to Get a List of Fiscal Period End Dates of Companies
Open In Colab   Download Notebook

The fiscal period end date, also referred to as "period of report" in EDGAR filings, is stated in Form 10-Q, 10-K, 13F-HR and other SEC filings. In the case of SEC filings, the period of report defines the time period the filing applies to, and is reported as a single date rather than an actual time period. The property periodOfReport in a filing object returned by the Query API represents its value.

In the following example, the Query API is used to find and list the period of reports of companies that disclosed the 50 latest 10-K filings filed in 2023. The approach can be adapted to extract period end dates for any filing type, such as 10-Q filings, across different years.

To speed up the collection of data points, 10-K filings without their variants, such as 10-K/A and late submission notifications NT 10-K, are considered. After fetching the metadata of the filings and extracting the period end date values, a pandas DataFrame is created, holding the fiscal year end periods per CIK and per ticker of the companies, respectively.

pip install sec-api
from sec_api import QueryApi

queryApi = QueryApi(api_key="YOUR_API_KEY")
search_params = {
  "query": "formType:"10-K" " +
           "AND NOT formType:"NT 10-K" " +
           "AND NOT formType:"10-K/A" " +
           "AND filedAt:[2023-01-01 TO 2023-12-31]",
  "from": "0",
  "size": "50",
  "sort": [{ "filedAt": { "order": "desc" } }]
}

response = queryApi.get_filings(search_params)
The Query API response contains a list of filings under response["filings"]. To inspect the response, a subset of properties from each filing—specifically formType and periodOfReport—can be printed.

For those unfamiliar with map and lambda, here's a brief explanation. The map function applies a lambda function to each filing in the list. In this case, the lambda function returns a new dictionary for each filing, extracting the formType and periodOfReport properties and setting them as values in the new dictionary. The result is then converted into a list for further use.

list(
    map(
        lambda x: {"formType": x["formType"], "periodOfReport": x["periodOfReport"]},
        response["filings"],
    )
)[:5]
[{'formType': '10-K', 'periodOfReport': '2023-09-30'},
 {'formType': '10-K', 'periodOfReport': '2023-09-30'},
 {'formType': '10-K', 'periodOfReport': '2023-07-31'},
 {'formType': '10-K', 'periodOfReport': '2023-09-30'},
 {'formType': '10-K', 'periodOfReport': '2023-09-30'}]
The same data, containing the formType and periodOfReport properties, can also be retrieved and processed using pandas DataFrames. This approach provides a more structured and flexible way to handle and analyze the data.

import pandas as pd

filings = pd.DataFrame(response["filings"])

filings[["cik", "ticker", "formType", "periodOfReport"]].head()
cik	ticker	formType	periodOfReport
0	90168	SIF	10-K	2023-09-30
1	1967306	MSBB	10-K	2023-09-30
2	1787412	WBBA	10-K	2023-07-31
3	12040	BDL	10-K	2023-09-30
4	1929589	MRDB	10-K	2023-09-30
print("Fiscal Period End Dates of Companies by CIK:")
filings[["cik", "periodOfReport"]].head()
Fiscal Period End Dates of Companies by CIK:
cik	periodOfReport
0	90168	2023-09-30
1	1967306	2023-09-30
2	1787412	2023-07-31
3	12040	2023-09-30
4	1929589	2023-09-30
print("Fiscal Period End Dates of Companies by Ticker:")
filings[["ticker", "periodOfReport"]].head()
Fiscal Period End Dates of Companies by Ticker:
ticker	periodOfReport
0	SIF	2023-09-30
1	MSBB	2023-09-30
2	WBBA	2023-07-31
3	BDL	2023-09-30
4	MRDB	2023-09-30
Finding EDGAR Filings by Item
Open In Colab   Download Notebook

The following examples show how to search for specific SEC filings based on their items using the Query API. These examples focus on locating 8-K filings that include Item 1.03, "Bankruptcy or Receivership," as well as Form D filings referencing items 6b and 3C.1. The approach can be adapted to search for any EDGAR filings that reference different items.

The EDGAR form types that include or reference specific items and can be searched by item are as follows:

8-K
8-K12B
8-K12G3
8F-2 ORDR
D
APP ORDR
APP NTC
APP WDG
1-U
ABS-15G
N-8F ORDR
N-8F NTC
6B ORDR
pip install -q sec-api
from sec_api import QueryApi

queryApi = QueryApi(api_key="YOUR_API_API_KEY")
Finding 8-K Filings by Event Items
This example demonstrates how to search for Form 8-K filings based on the event item IDs disclosed within the filing. The URLs and accession numbers of the located filings can then be used in combination with the Extractor API to extract and download the desired content sections of the event items.

For instance, the following search query retrieves the metadata of 8-K filings that include Item 1.03, "Bankruptcy or Receivership":

formType:"8-K" AND items:"1.03"
This query filters filings with a form type of "8-K" that also contain Item 1.03. To search for other event items, simply replace 1.03 with the desired item ID. For example, items:"3.01" corresponds to the section "Notice of Delisting or Failure to Satisfy a Continued Listing Rule or Standard; Transfer of Listing."

To further refine the search by date, a date range can be added:

filedAt:[2019-01-01 TO 2022-12-31]
This ensures that filings within the specified date range are retrieved, allowing for more focused results when running the query.

search_params = {
    "query": 'formType:"8-K" AND items:"1.03" AND filedAt:[2021-01-01 TO 2023-12-31]',
    "from": "0",
    "size": "50",
    "sort": [{"filedAt": {"order": "desc"}}],
}

response = queryApi.get_filings(search_params)
import pandas as pd

filings = pd.json_normalize(response['filings'])
print('Total filings matching the search query:', response['total']['value'])
print('Filings returned per API call:', len(filings))
Total filings matching the search query: 282
Filings returned per API call: 50
A total of 282 Form 8-K filings with Item 1.03 were filed between 2021-01-01 and 2023-12-31. The Query API limits the number of filings returned per request to a maximum of 50. In order to retrieve all 282 filings, we need to implement pagination by adjusting the from parameter in subsequent requests while keeping the size parameter constant at 50. The from parameter indicates the starting position or offset in the search results.

To fetch all 282 Form 8-K filings, we can define a function called get_filings(query) that handles the pagination process. This function will retrieve the next set of 50 filings by incrementing the from parameter in each subsequent request until no more filings are returned.

def get_filings(query):
    search_params = {
        "query": query,
        "from": 0,
        "size": "50",
        "sort": [{"filedAt": {"order": "desc"}}],
    }

    all_filings = []

    while True:
        response = queryApi.get_filings(search_params)
        filings = response["filings"]

        if len(filings) == 0:
            break

        all_filings.extend(filings)
        search_params["from"] += 50

    return pd.json_normalize(all_filings)


search_query = 'formType:"8-K" AND items:"1.03" AND filedAt:[2021-01-01 TO 2023-12-31]'

form_8K_with_1_03 = get_filings(search_query)
print('Number of 8-K filings with Item 1.03 between 2021 and 2023:
', len(form_8K_with_1_03))
Number of 8-K filings with Item 1.03 between 2021 and 2023:
 282
print('Metadata of 8-K filings')
print('------------------------')
form_8K_with_1_03[["formType", "accessionNo", "cik", "ticker", "filedAt", "items", "linkToFilingDetails"]].head()
Metadata of 8-K filings
------------------------
formType	accessionNo	cik	ticker	filedAt	items	linkToFilingDetails
0	8-K	0001193125-23-304154	716006	YELLQ	2023-12-27T17:20:57-05:00	[Item 1.03: Bankruptcy or Receivership, Item 2...	https://www.sec.gov/Archives/edgar/data/716006...
1	8-K	0001104659-23-129388	84129	RADCQ	2023-12-27T06:03:09-05:00	[Item 1.01: Entry into a Material Definitive A...	https://www.sec.gov/Archives/edgar/data/84129/...
2	8-K/A	0001861449-23-000222	1861449	BRDSQ	2023-12-26T21:05:59-05:00	[Item 1.01: Entry into a Material Definitive A...	https://www.sec.gov/Archives/edgar/data/186144...
3	8-K	0001213900-23-098373	1698113	IDICQ	2023-12-26T09:09:08-05:00	[Item 1.01: Entry into a Material Definitive A...	https://www.sec.gov/Archives/edgar/data/169811...
4	8-K	0001861449-23-000220	1861449	BRDSQ	2023-12-26T08:54:08-05:00	[Item 1.01: Entry into a Material Definitive A...	https://www.sec.gov/Archives/edgar/data/186144...
print('Items disclosed in the first 2 filings:')
list(form_8K_with_1_03['items'])[:2]
Items disclosed in the first 2 filings:
[['Item 1.03: Bankruptcy or Receivership',
  'Item 2.01: Completion of Acquisition or Disposition of Assets'],
 ['Item 1.01: Entry into a Material Definitive Agreement',
  'Item 1.03: Bankruptcy or Receivership',
  'Item 8.01: Other Events',
  'Item 9.01: Financial Statements and Exhibits']]
The linkToFilingDetails field in the response contains the URLs to the 8-K filings and items provides the item IDs of the triggering events that are disclosed in each filing. These URLs can be used to extract and download the textual content of Item 1.03 from all the located filings using the Extractor API.

Find Form D Filings by Item
The next example demonstrates how to find Form D filings by items specified under "Item 6 - Federal Exemptions and Exclusions Claimed". The following list represents commonly used items:

04
04.1
04.2
04.3
4a5
06b
06c
3C
3C.1
3C.3
3C.4
3C.5
3C.6
3C.7
3C.9
The following query will search for Form D filings (formType:D) that include both 06b and 3C.1 items. Modify the query to include other items as needed.

formType:D AND items:"06b" AND items:"3C.1"
search_query = (
    'formType:D AND items:"06b" AND items:"3C.1" AND filedAt:[2023-01-01 TO 2023-01-31]'
)

form_D_filings = get_filings(search_query)
print('Number of Form D filings found:', len(form_D_filings))
Number of Form D filings found: 1166
1166 Form D filings were found that match the search criteria. To validate and ensure that all filings include items 6b and 3C.1 in the items field, inspect the items field of the first five filings using the following code snippet:

list(form_D_filings['items'])[:5]
[['Item 06b: ',
  'Item 3C: Investment Company Act Section 3(c)',
  'Item 3C.1: Section 3(c)(1)'],
 ['Item 06b: ',
  'Item 3C: Investment Company Act Section 3(c)',
  'Item 3C.1: Section 3(c)(1)'],
 ['Item 06b: ',
  'Item 3C: Investment Company Act Section 3(c)',
  'Item 3C.1: Section 3(c)(1)'],
 ['Item 06b: ',
  'Item 3C: Investment Company Act Section 3(c)',
  'Item 3C.1: Section 3(c)(1)',
  'Item 3C.7: Section 3(c)(7)'],
 ['Item 06b: ',
  'Item 3C: Investment Company Act Section 3(c)',
  'Item 3C.1: Section 3(c)(1)']]